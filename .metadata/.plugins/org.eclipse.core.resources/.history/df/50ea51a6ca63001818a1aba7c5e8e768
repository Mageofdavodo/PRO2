package guifx;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import models.Arrangement;
import models.Tutor;
import service.Service;

public class MainApp extends Application {

    public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public void start(Stage stage) {
        stage.setTitle("Administration af tutorer og arrangementer");
        GridPane pane = new GridPane();
        Service.initStorage();
        initContent(pane);

        Scene scene = new Scene(pane);
        stage.setScene(scene);
        stage.show();
    }

    // -------------------------------------------------------------------------
    private ListView<Tutor> lvwTutorer;
    private ListView<Arrangement> lvwArrangementerTutor;
    private ListView<Arrangement> lvwArrangementerMulig;
    private TextField txfNavn, txfMail;

    private void initContent(GridPane pane) {
        pane.setGridLinesVisible(false);
        pane.setPadding(new Insets(20));
        pane.setHgap(20);
        pane.setVgap(10);

        Label lblTutor = new Label("Tutorer");
        pane.add(lblTutor, 0, 0);

        this.lvwTutorer = new ListView<>();
        this.lvwTutorer.setPrefSize(250, 200);
        pane.add(lvwTutorer, 0, 1, 1, 4);
        this.lvwTutorer.getItems().setAll(Service.getTutor());

        ChangeListener<Tutor> listenerTutor = (ov, oldTutor, newTutor) -> updateWhenSelected();
        this.lvwTutorer.getSelectionModel().selectedItemProperty().addListener(listenerTutor);

        Label lblNavn = new Label("Navn: ");
        pane.add(lblNavn, 1, 0);

        this.txfNavn = new TextField();
        pane.add(txfNavn, 2, 0);

        Label lblMail = new Label("Email: ");
        pane.add(lblMail, 1, 1);

        this.txfMail = new TextField();
        pane.add(txfMail, 2, 1);

        Label lblArrangementer = new Label("Arrangementer: ");
        pane.add(lblArrangementer, 1, 2);

        this.lvwArrangementerTutor = new ListView<>();
        this.lvwTutorer.setPrefSize(150, 100);
        pane.add(lvwArrangementerTutor, 2, 2);

        Label lblMulige = new Label("Alle mulige arrangementer");
        pane.add(lblMulige, 3, 1);

        this.lvwArrangementerMulig = new ListView<>();
        this.lvwArrangementerMulig.setPrefSize(150, 100);
        pane.add(lvwArrangementerMulig, 3, 2);
        this.lvwArrangementerMulig.getItems().setAll(Service.getArrangementer());

        Button btnFjern = new Button("Fjern");
        pane.add(btnFjern, 2, 3);
        btnFjern.setOnAction(event -> fjernAction());

        Button btnTilføj = new Button("Tilføj");
        pane.add(btnTilføj, 3, 3);
        btnTilføj.setOnAction(event -> tilføjAction());
    }

    private void updateWhenSelected() {
        Tutor tutor = this.lvwTutorer.getSelectionModel().getSelectedItem();
        if (tutor != null) {
            this.txfNavn.setText(tutor.getNavn());
            this.txfMail.setText(tutor.getEmail());
            if (tutor.getArrangementer() != null) {
                this.lvwArrangementerTutor.getItems().setAll(tutor.getArrangementer());
            }

        }

    }

    private void tilføjAction() {
        Tutor tutor = this.lvwTutorer.getSelectionModel().getSelectedItem();
        Arrangement arr = this.lvwArrangementerMulig.getSelectionModel().getSelectedItem();
        if (tutor != null && arr != null) {
            Service.addArrangementToTutor(arr, tutor);
        } else {
            return;
        }
    }

    private void fjernAction() {
        Tutor tutor = this.lvwTutorer.getSelectionModel().getSelectedItem();
        Arrangement arr = this.lvwArrangementerTutor.getSelectionModel().getSelectedItem();
        if (tutor != null && arr != null) {
            Service.removeArrangementFromTutor(arr, tutor);

            updateAfterAction();
            this.lvwTutorer.getSelectionModel().select(tutor);
        } else {
            return;
        }
    }

    private void updateAfterAction() {
        this.lvwTutorer.getItems().setAll(Service.getTutor());
        Tutor tutor = this.lvwTutorer.getSelectionModel().getSelectedItem();

        this.lvwArrangementerTutor.getItems().setAll(tutor.getArrangementer());
    }
}
